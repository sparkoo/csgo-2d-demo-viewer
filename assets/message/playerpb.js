// source: Message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.csgo.PlayerPb');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.PlayerPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.csgo.PlayerPb.repeatedFields_, null);
};
goog.inherits(proto.csgo.PlayerPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.PlayerPb.displayName = 'proto.csgo.PlayerPb';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.csgo.PlayerPb.repeatedFields_ = [23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.PlayerPb.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.PlayerPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.PlayerPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.PlayerPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    team: jspb.Message.getFieldWithDefault(msg, 3, ""),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    rotation: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    alive: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    weapon: jspb.Message.getFieldWithDefault(msg, 9, ""),
    flashed: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    hp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    armor: jspb.Message.getFieldWithDefault(msg, 12, 0),
    helmet: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    defuse: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    bomb: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    money: jspb.Message.getFieldWithDefault(msg, 16, 0),
    primary: jspb.Message.getFieldWithDefault(msg, 17, ""),
    primaryammomagazine: jspb.Message.getFieldWithDefault(msg, 18, 0),
    primaryammoreserve: jspb.Message.getFieldWithDefault(msg, 19, 0),
    secondary: jspb.Message.getFieldWithDefault(msg, 20, ""),
    secondaryammomagazine: jspb.Message.getFieldWithDefault(msg, 21, 0),
    secondaryammoreserve: jspb.Message.getFieldWithDefault(msg, 22, 0),
    grenadesList: (f = jspb.Message.getRepeatedField(msg, 23)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.PlayerPb}
 */
proto.csgo.PlayerPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.PlayerPb;
  return proto.csgo.PlayerPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.PlayerPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.PlayerPb}
 */
proto.csgo.PlayerPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeam(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotation(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlive(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeapon(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlashed(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArmor(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHelmet(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDefuse(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBomb(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMoney(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrimary(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrimaryammomagazine(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrimaryammoreserve(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondary(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondaryammomagazine(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondaryammoreserve(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.addGrenades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.PlayerPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.PlayerPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.PlayerPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.PlayerPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTeam();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getRotation();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getAlive();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getWeapon();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getFlashed();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getArmor();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getHelmet();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getDefuse();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getBomb();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getMoney();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getPrimary();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getPrimaryammomagazine();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getPrimaryammoreserve();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getSecondary();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getSecondaryammomagazine();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getSecondaryammoreserve();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getGrenadesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      23,
      f
    );
  }
};


/**
 * optional int32 PlayerId = 1;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getPlayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.csgo.PlayerPb.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Team = 3;
 * @return {string}
 */
proto.csgo.PlayerPb.prototype.getTeam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setTeam = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double X = 4;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double Y = 5;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double Z = 6;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float Rotation = 7;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setRotation = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional bool Alive = 8;
 * @return {boolean}
 */
proto.csgo.PlayerPb.prototype.getAlive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setAlive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string Weapon = 9;
 * @return {string}
 */
proto.csgo.PlayerPb.prototype.getWeapon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setWeapon = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool Flashed = 10;
 * @return {boolean}
 */
proto.csgo.PlayerPb.prototype.getFlashed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setFlashed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional int32 Hp = 11;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setHp = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 Armor = 12;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getArmor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setArmor = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool Helmet = 13;
 * @return {boolean}
 */
proto.csgo.PlayerPb.prototype.getHelmet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setHelmet = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool Defuse = 14;
 * @return {boolean}
 */
proto.csgo.PlayerPb.prototype.getDefuse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setDefuse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool Bomb = 15;
 * @return {boolean}
 */
proto.csgo.PlayerPb.prototype.getBomb = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setBomb = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional int32 Money = 16;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getMoney = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setMoney = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string Primary = 17;
 * @return {string}
 */
proto.csgo.PlayerPb.prototype.getPrimary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setPrimary = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int32 PrimaryAmmoMagazine = 18;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getPrimaryammomagazine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setPrimaryammomagazine = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 PrimaryAmmoReserve = 19;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getPrimaryammoreserve = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setPrimaryammoreserve = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional string Secondary = 20;
 * @return {string}
 */
proto.csgo.PlayerPb.prototype.getSecondary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setSecondary = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional int32 SecondaryAmmoMagazine = 21;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getSecondaryammomagazine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setSecondaryammomagazine = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 SecondaryAmmoReserve = 22;
 * @return {number}
 */
proto.csgo.PlayerPb.prototype.getSecondaryammoreserve = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setSecondaryammoreserve = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * repeated string Grenades = 23;
 * @return {!Array<string>}
 */
proto.csgo.PlayerPb.prototype.getGrenadesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 23));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.setGrenadesList = function(value) {
  return jspb.Message.setField(this, 23, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.addGrenades = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 23, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.csgo.PlayerPb} returns this
 */
proto.csgo.PlayerPb.prototype.clearGrenadesList = function() {
  return this.setGrenadesList([]);
};


