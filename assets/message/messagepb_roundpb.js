// source: Message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.csgo.MessagePb');
goog.provide('proto.csgo.MessagePb.MessageType');
goog.provide('proto.csgo.RoundPb');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.csgo.DemoPb');
goog.require('proto.csgo.GrenadePb');
goog.require('proto.csgo.InitPb');
goog.require('proto.csgo.KillPb');
goog.require('proto.csgo.ProgressPb');
goog.require('proto.csgo.RoundTimePb');
goog.require('proto.csgo.ShotPb');
goog.require('proto.csgo.TeamUpdatePb');
goog.require('proto.csgo.TickStatePb');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.MessagePb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.MessagePb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.MessagePb.displayName = 'proto.csgo.MessagePb';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.RoundPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.csgo.RoundPb.repeatedFields_, null);
};
goog.inherits(proto.csgo.RoundPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.RoundPb.displayName = 'proto.csgo.RoundPb';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.MessagePb.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.MessagePb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.MessagePb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.MessagePb.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tick: jspb.Message.getFieldWithDefault(msg, 2, 0),
    teamupdate: (f = msg.getTeamupdate()) && proto.csgo.TeamUpdatePb.toObject(includeInstance, f),
    tickstate: (f = msg.getTickstate()) && proto.csgo.TickStatePb.toObject(includeInstance, f),
    init: (f = msg.getInit()) && proto.csgo.InitPb.toObject(includeInstance, f),
    round: (f = msg.getRound()) && proto.csgo.RoundPb.toObject(includeInstance, f),
    progress: (f = msg.getProgress()) && proto.csgo.ProgressPb.toObject(includeInstance, f),
    roundtime: (f = msg.getRoundtime()) && proto.csgo.RoundTimePb.toObject(includeInstance, f),
    shot: (f = msg.getShot()) && proto.csgo.ShotPb.toObject(includeInstance, f),
    kill: (f = msg.getKill()) && proto.csgo.KillPb.toObject(includeInstance, f),
    demo: (f = msg.getDemo()) && proto.csgo.DemoPb.toObject(includeInstance, f),
    grenadeevent: (f = msg.getGrenadeevent()) && proto.csgo.GrenadePb.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.MessagePb}
 */
proto.csgo.MessagePb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.MessagePb;
  return proto.csgo.MessagePb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.MessagePb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.MessagePb}
 */
proto.csgo.MessagePb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.csgo.MessagePb.MessageType} */ (reader.readEnum());
      msg.setMsgtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTick(value);
      break;
    case 3:
      var value = new proto.csgo.TeamUpdatePb;
      reader.readMessage(value,proto.csgo.TeamUpdatePb.deserializeBinaryFromReader);
      msg.setTeamupdate(value);
      break;
    case 4:
      var value = new proto.csgo.TickStatePb;
      reader.readMessage(value,proto.csgo.TickStatePb.deserializeBinaryFromReader);
      msg.setTickstate(value);
      break;
    case 5:
      var value = new proto.csgo.InitPb;
      reader.readMessage(value,proto.csgo.InitPb.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 6:
      var value = new proto.csgo.RoundPb;
      reader.readMessage(value,proto.csgo.RoundPb.deserializeBinaryFromReader);
      msg.setRound(value);
      break;
    case 7:
      var value = new proto.csgo.ProgressPb;
      reader.readMessage(value,proto.csgo.ProgressPb.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    case 8:
      var value = new proto.csgo.RoundTimePb;
      reader.readMessage(value,proto.csgo.RoundTimePb.deserializeBinaryFromReader);
      msg.setRoundtime(value);
      break;
    case 9:
      var value = new proto.csgo.ShotPb;
      reader.readMessage(value,proto.csgo.ShotPb.deserializeBinaryFromReader);
      msg.setShot(value);
      break;
    case 10:
      var value = new proto.csgo.KillPb;
      reader.readMessage(value,proto.csgo.KillPb.deserializeBinaryFromReader);
      msg.setKill(value);
      break;
    case 11:
      var value = new proto.csgo.DemoPb;
      reader.readMessage(value,proto.csgo.DemoPb.deserializeBinaryFromReader);
      msg.setDemo(value);
      break;
    case 12:
      var value = new proto.csgo.GrenadePb;
      reader.readMessage(value,proto.csgo.GrenadePb.deserializeBinaryFromReader);
      msg.setGrenadeevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.MessagePb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.MessagePb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.MessagePb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.MessagePb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTick();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTeamupdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.csgo.TeamUpdatePb.serializeBinaryToWriter
    );
  }
  f = message.getTickstate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.csgo.TickStatePb.serializeBinaryToWriter
    );
  }
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.csgo.InitPb.serializeBinaryToWriter
    );
  }
  f = message.getRound();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.csgo.RoundPb.serializeBinaryToWriter
    );
  }
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.csgo.ProgressPb.serializeBinaryToWriter
    );
  }
  f = message.getRoundtime();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.csgo.RoundTimePb.serializeBinaryToWriter
    );
  }
  f = message.getShot();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.csgo.ShotPb.serializeBinaryToWriter
    );
  }
  f = message.getKill();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.csgo.KillPb.serializeBinaryToWriter
    );
  }
  f = message.getDemo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.csgo.DemoPb.serializeBinaryToWriter
    );
  }
  f = message.getGrenadeevent();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.csgo.GrenadePb.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.csgo.MessagePb.MessageType = {
  ZERO: 0,
  TICKSTATEUPDATE: 1,
  ADDPLAYERTYPE: 2,
  INITTYPE: 4,
  DEMOENDTYPE: 5,
  ROUNDTYPE: 6,
  PROGRESSTYPE: 7,
  TIMEUPDATETYPE: 8,
  SHOTTYPE: 9,
  EMPTYTYPE: 10,
  KILLTYPE: 11,
  PLAYREQUESTTYPE: 12,
  ERRORTYPE: 13,
  GRENADEEVENTTYPE: 14
};

/**
 * optional MessageType msgType = 1;
 * @return {!proto.csgo.MessagePb.MessageType}
 */
proto.csgo.MessagePb.prototype.getMsgtype = function() {
  return /** @type {!proto.csgo.MessagePb.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.csgo.MessagePb.MessageType} value
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.setMsgtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 tick = 2;
 * @return {number}
 */
proto.csgo.MessagePb.prototype.getTick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.setTick = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TeamUpdatePb teamUpdate = 3;
 * @return {?proto.csgo.TeamUpdatePb}
 */
proto.csgo.MessagePb.prototype.getTeamupdate = function() {
  return /** @type{?proto.csgo.TeamUpdatePb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.TeamUpdatePb, 3));
};


/**
 * @param {?proto.csgo.TeamUpdatePb|undefined} value
 * @return {!proto.csgo.MessagePb} returns this
*/
proto.csgo.MessagePb.prototype.setTeamupdate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.clearTeamupdate = function() {
  return this.setTeamupdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.MessagePb.prototype.hasTeamupdate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TickStatePb tickState = 4;
 * @return {?proto.csgo.TickStatePb}
 */
proto.csgo.MessagePb.prototype.getTickstate = function() {
  return /** @type{?proto.csgo.TickStatePb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.TickStatePb, 4));
};


/**
 * @param {?proto.csgo.TickStatePb|undefined} value
 * @return {!proto.csgo.MessagePb} returns this
*/
proto.csgo.MessagePb.prototype.setTickstate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.clearTickstate = function() {
  return this.setTickstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.MessagePb.prototype.hasTickstate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InitPb init = 5;
 * @return {?proto.csgo.InitPb}
 */
proto.csgo.MessagePb.prototype.getInit = function() {
  return /** @type{?proto.csgo.InitPb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.InitPb, 5));
};


/**
 * @param {?proto.csgo.InitPb|undefined} value
 * @return {!proto.csgo.MessagePb} returns this
*/
proto.csgo.MessagePb.prototype.setInit = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.MessagePb.prototype.hasInit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RoundPb round = 6;
 * @return {?proto.csgo.RoundPb}
 */
proto.csgo.MessagePb.prototype.getRound = function() {
  return /** @type{?proto.csgo.RoundPb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.RoundPb, 6));
};


/**
 * @param {?proto.csgo.RoundPb|undefined} value
 * @return {!proto.csgo.MessagePb} returns this
*/
proto.csgo.MessagePb.prototype.setRound = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.clearRound = function() {
  return this.setRound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.MessagePb.prototype.hasRound = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ProgressPb progress = 7;
 * @return {?proto.csgo.ProgressPb}
 */
proto.csgo.MessagePb.prototype.getProgress = function() {
  return /** @type{?proto.csgo.ProgressPb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.ProgressPb, 7));
};


/**
 * @param {?proto.csgo.ProgressPb|undefined} value
 * @return {!proto.csgo.MessagePb} returns this
*/
proto.csgo.MessagePb.prototype.setProgress = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.clearProgress = function() {
  return this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.MessagePb.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RoundTimePb roundTime = 8;
 * @return {?proto.csgo.RoundTimePb}
 */
proto.csgo.MessagePb.prototype.getRoundtime = function() {
  return /** @type{?proto.csgo.RoundTimePb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.RoundTimePb, 8));
};


/**
 * @param {?proto.csgo.RoundTimePb|undefined} value
 * @return {!proto.csgo.MessagePb} returns this
*/
proto.csgo.MessagePb.prototype.setRoundtime = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.clearRoundtime = function() {
  return this.setRoundtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.MessagePb.prototype.hasRoundtime = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ShotPb shot = 9;
 * @return {?proto.csgo.ShotPb}
 */
proto.csgo.MessagePb.prototype.getShot = function() {
  return /** @type{?proto.csgo.ShotPb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.ShotPb, 9));
};


/**
 * @param {?proto.csgo.ShotPb|undefined} value
 * @return {!proto.csgo.MessagePb} returns this
*/
proto.csgo.MessagePb.prototype.setShot = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.clearShot = function() {
  return this.setShot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.MessagePb.prototype.hasShot = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional KillPb kill = 10;
 * @return {?proto.csgo.KillPb}
 */
proto.csgo.MessagePb.prototype.getKill = function() {
  return /** @type{?proto.csgo.KillPb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.KillPb, 10));
};


/**
 * @param {?proto.csgo.KillPb|undefined} value
 * @return {!proto.csgo.MessagePb} returns this
*/
proto.csgo.MessagePb.prototype.setKill = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.clearKill = function() {
  return this.setKill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.MessagePb.prototype.hasKill = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DemoPb demo = 11;
 * @return {?proto.csgo.DemoPb}
 */
proto.csgo.MessagePb.prototype.getDemo = function() {
  return /** @type{?proto.csgo.DemoPb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.DemoPb, 11));
};


/**
 * @param {?proto.csgo.DemoPb|undefined} value
 * @return {!proto.csgo.MessagePb} returns this
*/
proto.csgo.MessagePb.prototype.setDemo = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.clearDemo = function() {
  return this.setDemo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.MessagePb.prototype.hasDemo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional GrenadePb grenadeEvent = 12;
 * @return {?proto.csgo.GrenadePb}
 */
proto.csgo.MessagePb.prototype.getGrenadeevent = function() {
  return /** @type{?proto.csgo.GrenadePb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.GrenadePb, 12));
};


/**
 * @param {?proto.csgo.GrenadePb|undefined} value
 * @return {!proto.csgo.MessagePb} returns this
*/
proto.csgo.MessagePb.prototype.setGrenadeevent = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.MessagePb} returns this
 */
proto.csgo.MessagePb.prototype.clearGrenadeevent = function() {
  return this.setGrenadeevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.MessagePb.prototype.hasGrenadeevent = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.csgo.RoundPb.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.RoundPb.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.RoundPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.RoundPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.RoundPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    roundno: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roundtookseconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
    starttick: jspb.Message.getFieldWithDefault(msg, 3, 0),
    freezetimeendtick: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endtick: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ticksList: jspb.Message.toObjectList(msg.getTicksList(),
    proto.csgo.MessagePb.toObject, includeInstance),
    teamstate: (f = msg.getTeamstate()) && proto.csgo.TeamUpdatePb.toObject(includeInstance, f),
    winner: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.RoundPb}
 */
proto.csgo.RoundPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.RoundPb;
  return proto.csgo.RoundPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.RoundPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.RoundPb}
 */
proto.csgo.RoundPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoundno(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoundtookseconds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarttick(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreezetimeendtick(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndtick(value);
      break;
    case 6:
      var value = new proto.csgo.MessagePb;
      reader.readMessage(value,proto.csgo.MessagePb.deserializeBinaryFromReader);
      msg.addTicks(value);
      break;
    case 7:
      var value = new proto.csgo.TeamUpdatePb;
      reader.readMessage(value,proto.csgo.TeamUpdatePb.deserializeBinaryFromReader);
      msg.setTeamstate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.RoundPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.RoundPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.RoundPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.RoundPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoundno();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoundtookseconds();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStarttick();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFreezetimeendtick();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEndtick();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTicksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.csgo.MessagePb.serializeBinaryToWriter
    );
  }
  f = message.getTeamstate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.csgo.TeamUpdatePb.serializeBinaryToWriter
    );
  }
  f = message.getWinner();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int32 RoundNo = 1;
 * @return {number}
 */
proto.csgo.RoundPb.prototype.getRoundno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.RoundPb} returns this
 */
proto.csgo.RoundPb.prototype.setRoundno = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 RoundTookSeconds = 2;
 * @return {number}
 */
proto.csgo.RoundPb.prototype.getRoundtookseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.RoundPb} returns this
 */
proto.csgo.RoundPb.prototype.setRoundtookseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 StartTick = 3;
 * @return {number}
 */
proto.csgo.RoundPb.prototype.getStarttick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.RoundPb} returns this
 */
proto.csgo.RoundPb.prototype.setStarttick = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 FreezetimeEndTick = 4;
 * @return {number}
 */
proto.csgo.RoundPb.prototype.getFreezetimeendtick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.RoundPb} returns this
 */
proto.csgo.RoundPb.prototype.setFreezetimeendtick = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 EndTick = 5;
 * @return {number}
 */
proto.csgo.RoundPb.prototype.getEndtick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.RoundPb} returns this
 */
proto.csgo.RoundPb.prototype.setEndtick = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated MessagePb Ticks = 6;
 * @return {!Array<!proto.csgo.MessagePb>}
 */
proto.csgo.RoundPb.prototype.getTicksList = function() {
  return /** @type{!Array<!proto.csgo.MessagePb>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.csgo.MessagePb, 6));
};


/**
 * @param {!Array<!proto.csgo.MessagePb>} value
 * @return {!proto.csgo.RoundPb} returns this
*/
proto.csgo.RoundPb.prototype.setTicksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.csgo.MessagePb=} opt_value
 * @param {number=} opt_index
 * @return {!proto.csgo.MessagePb}
 */
proto.csgo.RoundPb.prototype.addTicks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.csgo.MessagePb, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.csgo.RoundPb} returns this
 */
proto.csgo.RoundPb.prototype.clearTicksList = function() {
  return this.setTicksList([]);
};


/**
 * optional TeamUpdatePb TeamState = 7;
 * @return {?proto.csgo.TeamUpdatePb}
 */
proto.csgo.RoundPb.prototype.getTeamstate = function() {
  return /** @type{?proto.csgo.TeamUpdatePb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.TeamUpdatePb, 7));
};


/**
 * @param {?proto.csgo.TeamUpdatePb|undefined} value
 * @return {!proto.csgo.RoundPb} returns this
*/
proto.csgo.RoundPb.prototype.setTeamstate = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.RoundPb} returns this
 */
proto.csgo.RoundPb.prototype.clearTeamstate = function() {
  return this.setTeamstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.RoundPb.prototype.hasTeamstate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string Winner = 8;
 * @return {string}
 */
proto.csgo.RoundPb.prototype.getWinner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.RoundPb} returns this
 */
proto.csgo.RoundPb.prototype.setWinner = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


