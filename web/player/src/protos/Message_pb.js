// source: Message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.csgo.Bomb', null, global);
goog.exportSymbol('proto.csgo.Bomb.BombState', null, global);
goog.exportSymbol('proto.csgo.Demo', null, global);
goog.exportSymbol('proto.csgo.Demo.DemoPlatformType', null, global);
goog.exportSymbol('proto.csgo.Frag', null, global);
goog.exportSymbol('proto.csgo.Grenade', null, global);
goog.exportSymbol('proto.csgo.Init', null, global);
goog.exportSymbol('proto.csgo.Message', null, global);
goog.exportSymbol('proto.csgo.Message.MessageType', null, global);
goog.exportSymbol('proto.csgo.Player', null, global);
goog.exportSymbol('proto.csgo.Progress', null, global);
goog.exportSymbol('proto.csgo.Round', null, global);
goog.exportSymbol('proto.csgo.RoundTime', null, global);
goog.exportSymbol('proto.csgo.Shot', null, global);
goog.exportSymbol('proto.csgo.TeamUpdate', null, global);
goog.exportSymbol('proto.csgo.TickState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.Message.displayName = 'proto.csgo.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.csgo.Player.repeatedFields_, null);
};
goog.inherits(proto.csgo.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.Player.displayName = 'proto.csgo.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.TeamUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.TeamUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.TeamUpdate.displayName = 'proto.csgo.TeamUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.TickState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.csgo.TickState.repeatedFields_, null);
};
goog.inherits(proto.csgo.TickState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.TickState.displayName = 'proto.csgo.TickState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.Init = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.Init, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.Init.displayName = 'proto.csgo.Init';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.Frag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.Frag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.Frag.displayName = 'proto.csgo.Frag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.Shot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.Shot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.Shot.displayName = 'proto.csgo.Shot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.Grenade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.Grenade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.Grenade.displayName = 'proto.csgo.Grenade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.Bomb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.Bomb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.Bomb.displayName = 'proto.csgo.Bomb';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.Round = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.csgo.Round.repeatedFields_, null);
};
goog.inherits(proto.csgo.Round, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.Round.displayName = 'proto.csgo.Round';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.Progress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.Progress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.Progress.displayName = 'proto.csgo.Progress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.RoundTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.RoundTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.RoundTime.displayName = 'proto.csgo.RoundTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csgo.Demo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.csgo.Demo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csgo.Demo.displayName = 'proto.csgo.Demo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tick: jspb.Message.getFieldWithDefault(msg, 2, 0),
    teamupdate: (f = msg.getTeamupdate()) && proto.csgo.TeamUpdate.toObject(includeInstance, f),
    tickstate: (f = msg.getTickstate()) && proto.csgo.TickState.toObject(includeInstance, f),
    init: (f = msg.getInit()) && proto.csgo.Init.toObject(includeInstance, f),
    round: (f = msg.getRound()) && proto.csgo.Round.toObject(includeInstance, f),
    progress: (f = msg.getProgress()) && proto.csgo.Progress.toObject(includeInstance, f),
    roundtime: (f = msg.getRoundtime()) && proto.csgo.RoundTime.toObject(includeInstance, f),
    shot: (f = msg.getShot()) && proto.csgo.Shot.toObject(includeInstance, f),
    frag: (f = msg.getFrag()) && proto.csgo.Frag.toObject(includeInstance, f),
    demo: (f = msg.getDemo()) && proto.csgo.Demo.toObject(includeInstance, f),
    grenadeevent: (f = msg.getGrenadeevent()) && proto.csgo.Grenade.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.Message}
 */
proto.csgo.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.Message;
  return proto.csgo.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.Message}
 */
proto.csgo.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.csgo.Message.MessageType} */ (reader.readEnum());
      msg.setMsgtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTick(value);
      break;
    case 3:
      var value = new proto.csgo.TeamUpdate;
      reader.readMessage(value,proto.csgo.TeamUpdate.deserializeBinaryFromReader);
      msg.setTeamupdate(value);
      break;
    case 4:
      var value = new proto.csgo.TickState;
      reader.readMessage(value,proto.csgo.TickState.deserializeBinaryFromReader);
      msg.setTickstate(value);
      break;
    case 5:
      var value = new proto.csgo.Init;
      reader.readMessage(value,proto.csgo.Init.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 6:
      var value = new proto.csgo.Round;
      reader.readMessage(value,proto.csgo.Round.deserializeBinaryFromReader);
      msg.setRound(value);
      break;
    case 7:
      var value = new proto.csgo.Progress;
      reader.readMessage(value,proto.csgo.Progress.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    case 8:
      var value = new proto.csgo.RoundTime;
      reader.readMessage(value,proto.csgo.RoundTime.deserializeBinaryFromReader);
      msg.setRoundtime(value);
      break;
    case 9:
      var value = new proto.csgo.Shot;
      reader.readMessage(value,proto.csgo.Shot.deserializeBinaryFromReader);
      msg.setShot(value);
      break;
    case 10:
      var value = new proto.csgo.Frag;
      reader.readMessage(value,proto.csgo.Frag.deserializeBinaryFromReader);
      msg.setFrag(value);
      break;
    case 11:
      var value = new proto.csgo.Demo;
      reader.readMessage(value,proto.csgo.Demo.deserializeBinaryFromReader);
      msg.setDemo(value);
      break;
    case 12:
      var value = new proto.csgo.Grenade;
      reader.readMessage(value,proto.csgo.Grenade.deserializeBinaryFromReader);
      msg.setGrenadeevent(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTick();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTeamupdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.csgo.TeamUpdate.serializeBinaryToWriter
    );
  }
  f = message.getTickstate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.csgo.TickState.serializeBinaryToWriter
    );
  }
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.csgo.Init.serializeBinaryToWriter
    );
  }
  f = message.getRound();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.csgo.Round.serializeBinaryToWriter
    );
  }
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.csgo.Progress.serializeBinaryToWriter
    );
  }
  f = message.getRoundtime();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.csgo.RoundTime.serializeBinaryToWriter
    );
  }
  f = message.getShot();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.csgo.Shot.serializeBinaryToWriter
    );
  }
  f = message.getFrag();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.csgo.Frag.serializeBinaryToWriter
    );
  }
  f = message.getDemo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.csgo.Demo.serializeBinaryToWriter
    );
  }
  f = message.getGrenadeevent();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.csgo.Grenade.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.csgo.Message.MessageType = {
  ZERO: 0,
  TICKSTATEUPDATE: 1,
  ADDPLAYERTYPE: 2,
  INITTYPE: 4,
  DEMOENDTYPE: 5,
  ROUNDTYPE: 6,
  PROGRESSTYPE: 7,
  TIMEUPDATETYPE: 8,
  SHOTTYPE: 9,
  EMPTYTYPE: 10,
  FRAGTYPE: 11,
  PLAYREQUESTTYPE: 12,
  ERRORTYPE: 13,
  GRENADEEVENTTYPE: 14
};

/**
 * optional MessageType msgType = 1;
 * @return {!proto.csgo.Message.MessageType}
 */
proto.csgo.Message.prototype.getMsgtype = function() {
  return /** @type {!proto.csgo.Message.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.csgo.Message.MessageType} value
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.setMsgtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 tick = 2;
 * @return {number}
 */
proto.csgo.Message.prototype.getTick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.setTick = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TeamUpdate teamUpdate = 3;
 * @return {?proto.csgo.TeamUpdate}
 */
proto.csgo.Message.prototype.getTeamupdate = function() {
  return /** @type{?proto.csgo.TeamUpdate} */ (
    jspb.Message.getWrapperField(this, proto.csgo.TeamUpdate, 3));
};


/**
 * @param {?proto.csgo.TeamUpdate|undefined} value
 * @return {!proto.csgo.Message} returns this
*/
proto.csgo.Message.prototype.setTeamupdate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearTeamupdate = function() {
  return this.setTeamupdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasTeamupdate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TickState tickState = 4;
 * @return {?proto.csgo.TickState}
 */
proto.csgo.Message.prototype.getTickstate = function() {
  return /** @type{?proto.csgo.TickState} */ (
    jspb.Message.getWrapperField(this, proto.csgo.TickState, 4));
};


/**
 * @param {?proto.csgo.TickState|undefined} value
 * @return {!proto.csgo.Message} returns this
*/
proto.csgo.Message.prototype.setTickstate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearTickstate = function() {
  return this.setTickstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasTickstate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Init init = 5;
 * @return {?proto.csgo.Init}
 */
proto.csgo.Message.prototype.getInit = function() {
  return /** @type{?proto.csgo.Init} */ (
    jspb.Message.getWrapperField(this, proto.csgo.Init, 5));
};


/**
 * @param {?proto.csgo.Init|undefined} value
 * @return {!proto.csgo.Message} returns this
*/
proto.csgo.Message.prototype.setInit = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasInit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Round round = 6;
 * @return {?proto.csgo.Round}
 */
proto.csgo.Message.prototype.getRound = function() {
  return /** @type{?proto.csgo.Round} */ (
    jspb.Message.getWrapperField(this, proto.csgo.Round, 6));
};


/**
 * @param {?proto.csgo.Round|undefined} value
 * @return {!proto.csgo.Message} returns this
*/
proto.csgo.Message.prototype.setRound = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearRound = function() {
  return this.setRound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasRound = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Progress progress = 7;
 * @return {?proto.csgo.Progress}
 */
proto.csgo.Message.prototype.getProgress = function() {
  return /** @type{?proto.csgo.Progress} */ (
    jspb.Message.getWrapperField(this, proto.csgo.Progress, 7));
};


/**
 * @param {?proto.csgo.Progress|undefined} value
 * @return {!proto.csgo.Message} returns this
*/
proto.csgo.Message.prototype.setProgress = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearProgress = function() {
  return this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RoundTime roundTime = 8;
 * @return {?proto.csgo.RoundTime}
 */
proto.csgo.Message.prototype.getRoundtime = function() {
  return /** @type{?proto.csgo.RoundTime} */ (
    jspb.Message.getWrapperField(this, proto.csgo.RoundTime, 8));
};


/**
 * @param {?proto.csgo.RoundTime|undefined} value
 * @return {!proto.csgo.Message} returns this
*/
proto.csgo.Message.prototype.setRoundtime = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearRoundtime = function() {
  return this.setRoundtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasRoundtime = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Shot shot = 9;
 * @return {?proto.csgo.Shot}
 */
proto.csgo.Message.prototype.getShot = function() {
  return /** @type{?proto.csgo.Shot} */ (
    jspb.Message.getWrapperField(this, proto.csgo.Shot, 9));
};


/**
 * @param {?proto.csgo.Shot|undefined} value
 * @return {!proto.csgo.Message} returns this
*/
proto.csgo.Message.prototype.setShot = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearShot = function() {
  return this.setShot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasShot = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Frag frag = 10;
 * @return {?proto.csgo.Frag}
 */
proto.csgo.Message.prototype.getFrag = function() {
  return /** @type{?proto.csgo.Frag} */ (
    jspb.Message.getWrapperField(this, proto.csgo.Frag, 10));
};


/**
 * @param {?proto.csgo.Frag|undefined} value
 * @return {!proto.csgo.Message} returns this
*/
proto.csgo.Message.prototype.setFrag = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearFrag = function() {
  return this.setFrag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasFrag = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Demo demo = 11;
 * @return {?proto.csgo.Demo}
 */
proto.csgo.Message.prototype.getDemo = function() {
  return /** @type{?proto.csgo.Demo} */ (
    jspb.Message.getWrapperField(this, proto.csgo.Demo, 11));
};


/**
 * @param {?proto.csgo.Demo|undefined} value
 * @return {!proto.csgo.Message} returns this
*/
proto.csgo.Message.prototype.setDemo = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearDemo = function() {
  return this.setDemo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasDemo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Grenade grenadeEvent = 12;
 * @return {?proto.csgo.Grenade}
 */
proto.csgo.Message.prototype.getGrenadeevent = function() {
  return /** @type{?proto.csgo.Grenade} */ (
    jspb.Message.getWrapperField(this, proto.csgo.Grenade, 12));
};


/**
 * @param {?proto.csgo.Grenade|undefined} value
 * @return {!proto.csgo.Message} returns this
*/
proto.csgo.Message.prototype.setGrenadeevent = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearGrenadeevent = function() {
  return this.setGrenadeevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasGrenadeevent = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string message = 13;
 * @return {string}
 */
proto.csgo.Message.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.setMessage = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.csgo.Message} returns this
 */
proto.csgo.Message.prototype.clearMessage = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Message.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.csgo.Player.repeatedFields_ = [23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    team: jspb.Message.getFieldWithDefault(msg, 3, ""),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    rotation: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    alive: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    weapon: jspb.Message.getFieldWithDefault(msg, 9, ""),
    flashed: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    hp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    armor: jspb.Message.getFieldWithDefault(msg, 12, 0),
    helmet: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    defuse: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    bomb: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    money: jspb.Message.getFieldWithDefault(msg, 16, 0),
    primary: jspb.Message.getFieldWithDefault(msg, 17, ""),
    primaryammomagazine: jspb.Message.getFieldWithDefault(msg, 18, 0),
    primaryammoreserve: jspb.Message.getFieldWithDefault(msg, 19, 0),
    secondary: jspb.Message.getFieldWithDefault(msg, 20, ""),
    secondaryammomagazine: jspb.Message.getFieldWithDefault(msg, 21, 0),
    secondaryammoreserve: jspb.Message.getFieldWithDefault(msg, 22, 0),
    grenadesList: (f = jspb.Message.getRepeatedField(msg, 23)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.Player}
 */
proto.csgo.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.Player;
  return proto.csgo.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.Player}
 */
proto.csgo.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeam(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotation(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlive(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeapon(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlashed(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArmor(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHelmet(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDefuse(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBomb(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMoney(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrimary(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrimaryammomagazine(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrimaryammoreserve(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondary(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondaryammomagazine(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondaryammoreserve(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.addGrenades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTeam();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getRotation();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getAlive();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getWeapon();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getFlashed();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getArmor();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getHelmet();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getDefuse();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getBomb();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getMoney();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getPrimary();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getPrimaryammomagazine();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getPrimaryammoreserve();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getSecondary();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getSecondaryammomagazine();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getSecondaryammoreserve();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getGrenadesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      23,
      f
    );
  }
};


/**
 * optional int32 PlayerId = 1;
 * @return {number}
 */
proto.csgo.Player.prototype.getPlayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.csgo.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Team = 3;
 * @return {string}
 */
proto.csgo.Player.prototype.getTeam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setTeam = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double X = 4;
 * @return {number}
 */
proto.csgo.Player.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double Y = 5;
 * @return {number}
 */
proto.csgo.Player.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double Z = 6;
 * @return {number}
 */
proto.csgo.Player.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float Rotation = 7;
 * @return {number}
 */
proto.csgo.Player.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setRotation = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional bool Alive = 8;
 * @return {boolean}
 */
proto.csgo.Player.prototype.getAlive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setAlive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string Weapon = 9;
 * @return {string}
 */
proto.csgo.Player.prototype.getWeapon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setWeapon = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool Flashed = 10;
 * @return {boolean}
 */
proto.csgo.Player.prototype.getFlashed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setFlashed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional int32 Hp = 11;
 * @return {number}
 */
proto.csgo.Player.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setHp = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 Armor = 12;
 * @return {number}
 */
proto.csgo.Player.prototype.getArmor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setArmor = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool Helmet = 13;
 * @return {boolean}
 */
proto.csgo.Player.prototype.getHelmet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setHelmet = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool Defuse = 14;
 * @return {boolean}
 */
proto.csgo.Player.prototype.getDefuse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setDefuse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool Bomb = 15;
 * @return {boolean}
 */
proto.csgo.Player.prototype.getBomb = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setBomb = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional int32 Money = 16;
 * @return {number}
 */
proto.csgo.Player.prototype.getMoney = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setMoney = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string Primary = 17;
 * @return {string}
 */
proto.csgo.Player.prototype.getPrimary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setPrimary = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int32 PrimaryAmmoMagazine = 18;
 * @return {number}
 */
proto.csgo.Player.prototype.getPrimaryammomagazine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setPrimaryammomagazine = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 PrimaryAmmoReserve = 19;
 * @return {number}
 */
proto.csgo.Player.prototype.getPrimaryammoreserve = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setPrimaryammoreserve = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional string Secondary = 20;
 * @return {string}
 */
proto.csgo.Player.prototype.getSecondary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setSecondary = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional int32 SecondaryAmmoMagazine = 21;
 * @return {number}
 */
proto.csgo.Player.prototype.getSecondaryammomagazine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setSecondaryammomagazine = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 SecondaryAmmoReserve = 22;
 * @return {number}
 */
proto.csgo.Player.prototype.getSecondaryammoreserve = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setSecondaryammoreserve = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * repeated string Grenades = 23;
 * @return {!Array<string>}
 */
proto.csgo.Player.prototype.getGrenadesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 23));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.setGrenadesList = function(value) {
  return jspb.Message.setField(this, 23, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.addGrenades = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 23, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.csgo.Player} returns this
 */
proto.csgo.Player.prototype.clearGrenadesList = function() {
  return this.setGrenadesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.TeamUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.TeamUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.TeamUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.TeamUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    tname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tscore: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ctname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ctscore: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.TeamUpdate}
 */
proto.csgo.TeamUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.TeamUpdate;
  return proto.csgo.TeamUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.TeamUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.TeamUpdate}
 */
proto.csgo.TeamUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTscore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCtscore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.TeamUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.TeamUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.TeamUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.TeamUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTscore();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCtname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCtscore();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string TName = 1;
 * @return {string}
 */
proto.csgo.TeamUpdate.prototype.getTname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.TeamUpdate} returns this
 */
proto.csgo.TeamUpdate.prototype.setTname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 TScore = 2;
 * @return {number}
 */
proto.csgo.TeamUpdate.prototype.getTscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.TeamUpdate} returns this
 */
proto.csgo.TeamUpdate.prototype.setTscore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string CTName = 3;
 * @return {string}
 */
proto.csgo.TeamUpdate.prototype.getCtname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.TeamUpdate} returns this
 */
proto.csgo.TeamUpdate.prototype.setCtname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 CTScore = 4;
 * @return {number}
 */
proto.csgo.TeamUpdate.prototype.getCtscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.TeamUpdate} returns this
 */
proto.csgo.TeamUpdate.prototype.setCtscore = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.csgo.TickState.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.TickState.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.TickState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.TickState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.TickState.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.csgo.Player.toObject, includeInstance),
    nadesList: jspb.Message.toObjectList(msg.getNadesList(),
    proto.csgo.Grenade.toObject, includeInstance),
    bomb: (f = msg.getBomb()) && proto.csgo.Bomb.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.TickState}
 */
proto.csgo.TickState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.TickState;
  return proto.csgo.TickState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.TickState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.TickState}
 */
proto.csgo.TickState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.csgo.Player;
      reader.readMessage(value,proto.csgo.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 2:
      var value = new proto.csgo.Grenade;
      reader.readMessage(value,proto.csgo.Grenade.deserializeBinaryFromReader);
      msg.addNades(value);
      break;
    case 3:
      var value = new proto.csgo.Bomb;
      reader.readMessage(value,proto.csgo.Bomb.deserializeBinaryFromReader);
      msg.setBomb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.TickState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.TickState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.TickState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.TickState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.csgo.Player.serializeBinaryToWriter
    );
  }
  f = message.getNadesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.csgo.Grenade.serializeBinaryToWriter
    );
  }
  f = message.getBomb();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.csgo.Bomb.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Player Players = 1;
 * @return {!Array<!proto.csgo.Player>}
 */
proto.csgo.TickState.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.csgo.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.csgo.Player, 1));
};


/**
 * @param {!Array<!proto.csgo.Player>} value
 * @return {!proto.csgo.TickState} returns this
*/
proto.csgo.TickState.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.csgo.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.csgo.Player}
 */
proto.csgo.TickState.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.csgo.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.csgo.TickState} returns this
 */
proto.csgo.TickState.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * repeated Grenade Nades = 2;
 * @return {!Array<!proto.csgo.Grenade>}
 */
proto.csgo.TickState.prototype.getNadesList = function() {
  return /** @type{!Array<!proto.csgo.Grenade>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.csgo.Grenade, 2));
};


/**
 * @param {!Array<!proto.csgo.Grenade>} value
 * @return {!proto.csgo.TickState} returns this
*/
proto.csgo.TickState.prototype.setNadesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.csgo.Grenade=} opt_value
 * @param {number=} opt_index
 * @return {!proto.csgo.Grenade}
 */
proto.csgo.TickState.prototype.addNades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.csgo.Grenade, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.csgo.TickState} returns this
 */
proto.csgo.TickState.prototype.clearNadesList = function() {
  return this.setNadesList([]);
};


/**
 * optional Bomb Bomb = 3;
 * @return {?proto.csgo.Bomb}
 */
proto.csgo.TickState.prototype.getBomb = function() {
  return /** @type{?proto.csgo.Bomb} */ (
    jspb.Message.getWrapperField(this, proto.csgo.Bomb, 3));
};


/**
 * @param {?proto.csgo.Bomb|undefined} value
 * @return {!proto.csgo.TickState} returns this
*/
proto.csgo.TickState.prototype.setBomb = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.TickState} returns this
 */
proto.csgo.TickState.prototype.clearBomb = function() {
  return this.setBomb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.TickState.prototype.hasBomb = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.Init.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.Init.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.Init} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Init.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ctname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.Init}
 */
proto.csgo.Init.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.Init;
  return proto.csgo.Init.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.Init} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.Init}
 */
proto.csgo.Init.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.Init.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.Init.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.Init} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Init.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCtname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string mapName = 1;
 * @return {string}
 */
proto.csgo.Init.prototype.getMapname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Init} returns this
 */
proto.csgo.Init.prototype.setMapname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string TName = 2;
 * @return {string}
 */
proto.csgo.Init.prototype.getTname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Init} returns this
 */
proto.csgo.Init.prototype.setTname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string CTName = 3;
 * @return {string}
 */
proto.csgo.Init.prototype.getCtname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Init} returns this
 */
proto.csgo.Init.prototype.setCtname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.Frag.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.Frag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.Frag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Frag.toObject = function(includeInstance, msg) {
  var f, obj = {
    victimname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    victimteam: jspb.Message.getFieldWithDefault(msg, 2, ""),
    killername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    killerteam: jspb.Message.getFieldWithDefault(msg, 4, ""),
    weapon: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.Frag}
 */
proto.csgo.Frag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.Frag;
  return proto.csgo.Frag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.Frag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.Frag}
 */
proto.csgo.Frag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVictimname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVictimteam(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKillername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKillerteam(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeapon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.Frag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.Frag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.Frag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Frag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVictimname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVictimteam();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKillername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getKillerteam();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWeapon();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string VictimName = 1;
 * @return {string}
 */
proto.csgo.Frag.prototype.getVictimname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Frag} returns this
 */
proto.csgo.Frag.prototype.setVictimname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string VictimTeam = 2;
 * @return {string}
 */
proto.csgo.Frag.prototype.getVictimteam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Frag} returns this
 */
proto.csgo.Frag.prototype.setVictimteam = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string KillerName = 3;
 * @return {string}
 */
proto.csgo.Frag.prototype.getKillername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Frag} returns this
 */
proto.csgo.Frag.prototype.setKillername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string KillerTeam = 4;
 * @return {string}
 */
proto.csgo.Frag.prototype.getKillerteam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Frag} returns this
 */
proto.csgo.Frag.prototype.setKillerteam = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Weapon = 5;
 * @return {string}
 */
proto.csgo.Frag.prototype.getWeapon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Frag} returns this
 */
proto.csgo.Frag.prototype.setWeapon = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.Shot.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.Shot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.Shot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Shot.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    rotation: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.Shot}
 */
proto.csgo.Shot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.Shot;
  return proto.csgo.Shot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.Shot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.Shot}
 */
proto.csgo.Shot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.Shot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.Shot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.Shot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Shot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getRotation();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional int32 PlayerId = 1;
 * @return {number}
 */
proto.csgo.Shot.prototype.getPlayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Shot} returns this
 */
proto.csgo.Shot.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double X = 2;
 * @return {number}
 */
proto.csgo.Shot.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Shot} returns this
 */
proto.csgo.Shot.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double Y = 3;
 * @return {number}
 */
proto.csgo.Shot.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Shot} returns this
 */
proto.csgo.Shot.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float Rotation = 4;
 * @return {number}
 */
proto.csgo.Shot.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Shot} returns this
 */
proto.csgo.Shot.prototype.setRotation = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.Grenade.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.Grenade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.Grenade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Grenade.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kind: jspb.Message.getFieldWithDefault(msg, 2, ""),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    action: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.Grenade}
 */
proto.csgo.Grenade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.Grenade;
  return proto.csgo.Grenade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.Grenade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.Grenade}
 */
proto.csgo.Grenade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.Grenade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.Grenade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.Grenade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Grenade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.csgo.Grenade.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Grenade} returns this
 */
proto.csgo.Grenade.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string kind = 2;
 * @return {string}
 */
proto.csgo.Grenade.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Grenade} returns this
 */
proto.csgo.Grenade.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double x = 3;
 * @return {number}
 */
proto.csgo.Grenade.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Grenade} returns this
 */
proto.csgo.Grenade.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double y = 4;
 * @return {number}
 */
proto.csgo.Grenade.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Grenade} returns this
 */
proto.csgo.Grenade.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double z = 5;
 * @return {number}
 */
proto.csgo.Grenade.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Grenade} returns this
 */
proto.csgo.Grenade.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string action = 6;
 * @return {string}
 */
proto.csgo.Grenade.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Grenade} returns this
 */
proto.csgo.Grenade.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.Bomb.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.Bomb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.Bomb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Bomb.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.Bomb}
 */
proto.csgo.Bomb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.Bomb;
  return proto.csgo.Bomb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.Bomb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.Bomb}
 */
proto.csgo.Bomb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {!proto.csgo.Bomb.BombState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.Bomb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.Bomb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.Bomb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Bomb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.csgo.Bomb.BombState = {
  ZERO: 0,
  DEFUSING: 1,
  DEFUSED: 2,
  EXPLODE: 3,
  PLANTING: 4,
  PLANTED: 5
};

/**
 * optional double x = 1;
 * @return {number}
 */
proto.csgo.Bomb.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Bomb} returns this
 */
proto.csgo.Bomb.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.csgo.Bomb.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Bomb} returns this
 */
proto.csgo.Bomb.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.csgo.Bomb.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Bomb} returns this
 */
proto.csgo.Bomb.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional BombState state = 4;
 * @return {!proto.csgo.Bomb.BombState}
 */
proto.csgo.Bomb.prototype.getState = function() {
  return /** @type {!proto.csgo.Bomb.BombState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.csgo.Bomb.BombState} value
 * @return {!proto.csgo.Bomb} returns this
 */
proto.csgo.Bomb.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.csgo.Round.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.Round.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.Round.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.Round} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Round.toObject = function(includeInstance, msg) {
  var f, obj = {
    roundno: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roundtookseconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
    starttick: jspb.Message.getFieldWithDefault(msg, 3, 0),
    freezetimeendtick: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endtick: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ticksList: jspb.Message.toObjectList(msg.getTicksList(),
    proto.csgo.Message.toObject, includeInstance),
    teamstate: (f = msg.getTeamstate()) && proto.csgo.TeamUpdate.toObject(includeInstance, f),
    winner: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.Round}
 */
proto.csgo.Round.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.Round;
  return proto.csgo.Round.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.Round} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.Round}
 */
proto.csgo.Round.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoundno(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoundtookseconds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarttick(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreezetimeendtick(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndtick(value);
      break;
    case 6:
      var value = new proto.csgo.Message;
      reader.readMessage(value,proto.csgo.Message.deserializeBinaryFromReader);
      msg.addTicks(value);
      break;
    case 7:
      var value = new proto.csgo.TeamUpdate;
      reader.readMessage(value,proto.csgo.TeamUpdate.deserializeBinaryFromReader);
      msg.setTeamstate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.Round.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.Round.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.Round} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Round.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoundno();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoundtookseconds();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStarttick();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFreezetimeendtick();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEndtick();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTicksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.csgo.Message.serializeBinaryToWriter
    );
  }
  f = message.getTeamstate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.csgo.TeamUpdate.serializeBinaryToWriter
    );
  }
  f = message.getWinner();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int32 RoundNo = 1;
 * @return {number}
 */
proto.csgo.Round.prototype.getRoundno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Round} returns this
 */
proto.csgo.Round.prototype.setRoundno = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 RoundTookSeconds = 2;
 * @return {number}
 */
proto.csgo.Round.prototype.getRoundtookseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Round} returns this
 */
proto.csgo.Round.prototype.setRoundtookseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 StartTick = 3;
 * @return {number}
 */
proto.csgo.Round.prototype.getStarttick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Round} returns this
 */
proto.csgo.Round.prototype.setStarttick = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 FreezetimeEndTick = 4;
 * @return {number}
 */
proto.csgo.Round.prototype.getFreezetimeendtick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Round} returns this
 */
proto.csgo.Round.prototype.setFreezetimeendtick = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 EndTick = 5;
 * @return {number}
 */
proto.csgo.Round.prototype.getEndtick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Round} returns this
 */
proto.csgo.Round.prototype.setEndtick = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Message Ticks = 6;
 * @return {!Array<!proto.csgo.Message>}
 */
proto.csgo.Round.prototype.getTicksList = function() {
  return /** @type{!Array<!proto.csgo.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.csgo.Message, 6));
};


/**
 * @param {!Array<!proto.csgo.Message>} value
 * @return {!proto.csgo.Round} returns this
*/
proto.csgo.Round.prototype.setTicksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.csgo.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.csgo.Message}
 */
proto.csgo.Round.prototype.addTicks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.csgo.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.csgo.Round} returns this
 */
proto.csgo.Round.prototype.clearTicksList = function() {
  return this.setTicksList([]);
};


/**
 * optional TeamUpdate TeamState = 7;
 * @return {?proto.csgo.TeamUpdate}
 */
proto.csgo.Round.prototype.getTeamstate = function() {
  return /** @type{?proto.csgo.TeamUpdate} */ (
    jspb.Message.getWrapperField(this, proto.csgo.TeamUpdate, 7));
};


/**
 * @param {?proto.csgo.TeamUpdate|undefined} value
 * @return {!proto.csgo.Round} returns this
*/
proto.csgo.Round.prototype.setTeamstate = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csgo.Round} returns this
 */
proto.csgo.Round.prototype.clearTeamstate = function() {
  return this.setTeamstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csgo.Round.prototype.hasTeamstate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string Winner = 8;
 * @return {string}
 */
proto.csgo.Round.prototype.getWinner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Round} returns this
 */
proto.csgo.Round.prototype.setWinner = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.Progress.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.Progress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.Progress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Progress.toObject = function(includeInstance, msg) {
  var f, obj = {
    progress: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.Progress}
 */
proto.csgo.Progress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.Progress;
  return proto.csgo.Progress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.Progress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.Progress}
 */
proto.csgo.Progress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProgress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.Progress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.Progress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.Progress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Progress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgress();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 Progress = 1;
 * @return {number}
 */
proto.csgo.Progress.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.Progress} returns this
 */
proto.csgo.Progress.prototype.setProgress = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.csgo.Progress.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Progress} returns this
 */
proto.csgo.Progress.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.RoundTime.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.RoundTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.RoundTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.RoundTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    roundtime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    freezetime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.RoundTime}
 */
proto.csgo.RoundTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.RoundTime;
  return proto.csgo.RoundTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.RoundTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.RoundTime}
 */
proto.csgo.RoundTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoundtime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreezetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.RoundTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.RoundTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.RoundTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.RoundTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoundtime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFreezetime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string RoundTime = 1;
 * @return {string}
 */
proto.csgo.RoundTime.prototype.getRoundtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.RoundTime} returns this
 */
proto.csgo.RoundTime.prototype.setRoundtime = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 FreezeTime = 2;
 * @return {number}
 */
proto.csgo.RoundTime.prototype.getFreezetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.csgo.RoundTime} returns this
 */
proto.csgo.RoundTime.prototype.setFreezetime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csgo.Demo.prototype.toObject = function(opt_includeInstance) {
  return proto.csgo.Demo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csgo.Demo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Demo.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csgo.Demo}
 */
proto.csgo.Demo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csgo.Demo;
  return proto.csgo.Demo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csgo.Demo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csgo.Demo}
 */
proto.csgo.Demo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 2:
      var value = /** @type {!proto.csgo.Demo.DemoPlatformType} */ (reader.readEnum());
      msg.setPlatform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csgo.Demo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csgo.Demo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csgo.Demo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csgo.Demo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlatform();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.csgo.Demo.DemoPlatformType = {
  UPLOAD: 0,
  FACEIT: 1,
  STEAM: 2
};

/**
 * optional string MatchId = 1;
 * @return {string}
 */
proto.csgo.Demo.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.csgo.Demo} returns this
 */
proto.csgo.Demo.prototype.setMatchid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DemoPlatformType Platform = 2;
 * @return {!proto.csgo.Demo.DemoPlatformType}
 */
proto.csgo.Demo.prototype.getPlatform = function() {
  return /** @type {!proto.csgo.Demo.DemoPlatformType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.csgo.Demo.DemoPlatformType} value
 * @return {!proto.csgo.Demo} returns this
 */
proto.csgo.Demo.prototype.setPlatform = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


goog.object.extend(exports, proto.csgo);
