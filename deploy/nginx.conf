user nginx;
worker_processes auto;
error_log stdout info;
pid /var/run/nginx.pid;

include /etc/nginx/modules/*.conf;
include /etc/nginx/conf.d/*.conf;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Force chunked transfer to client to avoid Content-Length-based caps on front proxies
    chunked_transfer_encoding on;

    # Removed direct-redirect map to ensure all traffic is proxied (avoid CORS issues)

    log_format main 'blabol $remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_host" '
                    '$request_time $upstream_response_time $upstream_status';

    access_log stdout main;
    log_subrequest on;

    resolver 1.1.1.1 8.8.8.8 ipv6=off valid=300s;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    send_timeout 600s;
    types_hash_max_size 2048;

    server {
        listen 8080;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Enable gzip compression
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/wasm;

        # Cache static assets, including WASM
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|wasm)$ {
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Handle SPA routing - serve index.html for all routes
        location / {
            try_files $uri $uri/ /index.html;
        }

        location /download {
            # 1. Capture the 'url' query parameter
            # Decode the URL to handle encoded URLs from clients
            # Requires ngx_http_set_misc_module
            set_unescape_uri $remote_url $arg_url;

            # Handle CORS preflight for Range requests
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Range, Content-Type, Authorization, X-Requested-With' always;
                add_header 'Access-Control-Max-Age' 86400 always;
                return 204;
            }

            # Removed direct 302 redirect to ensure proxying and avoid CORS issues

            # Always proxy (no redirects) to control headers and CORS

            # 2. Key for efficiency: Disable local buffering to ensure true streaming.
            # NGINX will read chunks from the remote server and write them immediately to the client.
            proxy_buffering off;
            proxy_request_buffering off;
            gzip off;
            # Do not write proxied response to temp files
            proxy_max_temp_file_size 0;
            # Use HTTP/1.1 with upstream and allow keep-alive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            # Timeouts for large file downloads
            proxy_connect_timeout 30s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;

            add_header X-Proxy-Target-URL $arg_url always;
            add_header X-Remote-URL $remote_url always;
            add_header X-Upstream-Status $upstream_status always;
            add_header X-Upstream-Addr $upstream_addr always;
            add_header X-Accel-Buffering "no" always;

            # 4. Optional: Rewrite headers for better compatibility
            proxy_set_header Host $proxy_host;
            proxy_set_header X-Real-IP $remote_addr;
            # Support range/resume downloads
            proxy_set_header Range $http_range;
            proxy_hide_header Content-Disposition; # Prevents double disposition headers
            # Hide upstream Content-Length to encourage chunked transfer to client
            proxy_hide_header Content-Length;
            # Minimal headers for S3 compatibility - avoid forwarding client headers that may cause rejection
            proxy_ssl_server_name on;
            proxy_ssl_name $proxy_host;

            # # CORS headers for faceit.com and www.faceit.com
            # if ($http_origin ~* "^https?://(www\.)?faceit\.com$") {
            #     add_header Access-Control-Allow-Origin $http_origin;
            # }
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Range, Content-Type, Authorization, X-Requested-With";
            add_header Access-Control-Expose-Headers "Content-Range, Accept-Ranges, Content-Length" always;
            add_header Accept-Ranges "bytes" always;
            add_header Vary Origin;

            # 3. Pass the request to the remote URL.
            # This is the magic directive. NGINX fetches the content from $remote_url
            # and streams it back to the client.
            add_header X-Served-By "nginx-proxy" always;
            proxy_intercept_errors on;
            error_page 500 502 503 504 = @download_error;
            proxy_pass $remote_url;
        }

        # Tag internal 5xx so we can tell if nginx generated the error vs. a fronting proxy/CDN
        location @download_error {
            add_header X-Nginx-Intercept "true" always;
            add_header X-Proxy-Target-URL $arg_url always;
            add_header X-Remote-URL $remote_url always;
            add_header X-Upstream-Status $upstream_status always;
            return 500;
        }
    }
}
