user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_host"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    server {
        listen 8080;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Enable gzip compression
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/wasm;

        # Cache static assets, including WASM
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|wasm)$ {
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Handle SPA routing - serve index.html for all routes
        location / {
            try_files $uri $uri/ /index.html;
        }

        location /download {
            # 1. Capture the 'url' query parameter
            # Decode the URL to handle encoded URLs from clients
            # Requires ngx_http_set_misc_module
            set_unescape_uri $remote_url $arg_url;

            # 2. Key for efficiency: Disable local buffering to ensure true streaming.
            # NGINX will read chunks from the remote server and write them immediately to the client.
            proxy_buffering off;
            proxy_request_buffering off;

            # 3. Pass the request to the remote URL.
            # This is the magic directive. NGINX fetches the content from $remote_url
            # and streams it back to the client.
            proxy_pass $remote_url;

            # 4. Optional: Rewrite headers for better compatibility
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_hide_header Content-Disposition; # Prevents double disposition headers

            # CORS headers for faceit.com and www.faceit.com
            if ($http_origin ~* "^https?://(www\.)?faceit\.com$") {
                add_header Access-Control-Allow-Origin $http_origin;
            }
            add_header Access-Control-Allow-Methods "GET";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
            add_header Vary Origin;
        }
    }
}
