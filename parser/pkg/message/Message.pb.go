// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.28.3
// source: Message.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message_MessageType int32

const (
	Message_Zero             Message_MessageType = 0
	Message_TickStateUpdate  Message_MessageType = 1
	Message_AddPlayerType    Message_MessageType = 2
	Message_InitType         Message_MessageType = 4
	Message_DemoEndType      Message_MessageType = 5
	Message_RoundType        Message_MessageType = 6
	Message_ProgressType     Message_MessageType = 7
	Message_TimeUpdateType   Message_MessageType = 8
	Message_ShotType         Message_MessageType = 9
	Message_EmptyType        Message_MessageType = 10
	Message_FragType         Message_MessageType = 11
	Message_PlayRequestType  Message_MessageType = 12
	Message_ErrorType        Message_MessageType = 13
	Message_GrenadeEventType Message_MessageType = 14
)

// Enum value maps for Message_MessageType.
var (
	Message_MessageType_name = map[int32]string{
		0:  "Zero",
		1:  "TickStateUpdate",
		2:  "AddPlayerType",
		4:  "InitType",
		5:  "DemoEndType",
		6:  "RoundType",
		7:  "ProgressType",
		8:  "TimeUpdateType",
		9:  "ShotType",
		10: "EmptyType",
		11: "FragType",
		12: "PlayRequestType",
		13: "ErrorType",
		14: "GrenadeEventType",
	}
	Message_MessageType_value = map[string]int32{
		"Zero":             0,
		"TickStateUpdate":  1,
		"AddPlayerType":    2,
		"InitType":         4,
		"DemoEndType":      5,
		"RoundType":        6,
		"ProgressType":     7,
		"TimeUpdateType":   8,
		"ShotType":         9,
		"EmptyType":        10,
		"FragType":         11,
		"PlayRequestType":  12,
		"ErrorType":        13,
		"GrenadeEventType": 14,
	}
)

func (x Message_MessageType) Enum() *Message_MessageType {
	p := new(Message_MessageType)
	*p = x
	return p
}

func (x Message_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[0].Descriptor()
}

func (Message_MessageType) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[0]
}

func (x Message_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_MessageType.Descriptor instead.
func (Message_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{0, 0}
}

type Bomb_BombState int32

const (
	Bomb_Zero     Bomb_BombState = 0
	Bomb_Defusing Bomb_BombState = 1
	Bomb_Defused  Bomb_BombState = 2
	Bomb_Explode  Bomb_BombState = 3
	Bomb_Planting Bomb_BombState = 4
	Bomb_Planted  Bomb_BombState = 5
)

// Enum value maps for Bomb_BombState.
var (
	Bomb_BombState_name = map[int32]string{
		0: "Zero",
		1: "Defusing",
		2: "Defused",
		3: "Explode",
		4: "Planting",
		5: "Planted",
	}
	Bomb_BombState_value = map[string]int32{
		"Zero":     0,
		"Defusing": 1,
		"Defused":  2,
		"Explode":  3,
		"Planting": 4,
		"Planted":  5,
	}
)

func (x Bomb_BombState) Enum() *Bomb_BombState {
	p := new(Bomb_BombState)
	*p = x
	return p
}

func (x Bomb_BombState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bomb_BombState) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[1].Descriptor()
}

func (Bomb_BombState) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[1]
}

func (x Bomb_BombState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bomb_BombState.Descriptor instead.
func (Bomb_BombState) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{8, 0}
}

type Demo_DemoPlatformType int32

const (
	Demo_Upload Demo_DemoPlatformType = 0
	Demo_Faceit Demo_DemoPlatformType = 1
	Demo_Steam  Demo_DemoPlatformType = 2
)

// Enum value maps for Demo_DemoPlatformType.
var (
	Demo_DemoPlatformType_name = map[int32]string{
		0: "Upload",
		1: "Faceit",
		2: "Steam",
	}
	Demo_DemoPlatformType_value = map[string]int32{
		"Upload": 0,
		"Faceit": 1,
		"Steam":  2,
	}
)

func (x Demo_DemoPlatformType) Enum() *Demo_DemoPlatformType {
	p := new(Demo_DemoPlatformType)
	*p = x
	return p
}

func (x Demo_DemoPlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Demo_DemoPlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[2].Descriptor()
}

func (Demo_DemoPlatformType) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[2]
}

func (x Demo_DemoPlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Demo_DemoPlatformType.Descriptor instead.
func (Demo_DemoPlatformType) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{12, 0}
}

type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgType       Message_MessageType    `protobuf:"varint,1,opt,name=msgType,proto3,enum=csgo.Message_MessageType" json:"msgType,omitempty"`
	Tick          int32                  `protobuf:"varint,2,opt,name=tick,proto3" json:"tick,omitempty"`
	TeamUpdate    *TeamUpdate            `protobuf:"bytes,3,opt,name=teamUpdate,proto3,oneof" json:"teamUpdate,omitempty"`
	TickState     *TickState             `protobuf:"bytes,4,opt,name=tickState,proto3,oneof" json:"tickState,omitempty"`
	Init          *Init                  `protobuf:"bytes,5,opt,name=init,proto3,oneof" json:"init,omitempty"`
	Round         *Round                 `protobuf:"bytes,6,opt,name=round,proto3,oneof" json:"round,omitempty"`
	Progress      *Progress              `protobuf:"bytes,7,opt,name=progress,proto3,oneof" json:"progress,omitempty"`
	RoundTime     *RoundTime             `protobuf:"bytes,8,opt,name=roundTime,proto3,oneof" json:"roundTime,omitempty"`
	Shot          *Shot                  `protobuf:"bytes,9,opt,name=shot,proto3,oneof" json:"shot,omitempty"`
	Frag          *Frag                  `protobuf:"bytes,10,opt,name=frag,proto3,oneof" json:"frag,omitempty"`
	Demo          *Demo                  `protobuf:"bytes,11,opt,name=demo,proto3,oneof" json:"demo,omitempty"`
	GrenadeEvent  *Grenade               `protobuf:"bytes,12,opt,name=grenadeEvent,proto3,oneof" json:"grenadeEvent,omitempty"`
	Message       *string                `protobuf:"bytes,13,opt,name=message,proto3,oneof" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_Message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetMsgType() Message_MessageType {
	if x != nil {
		return x.MsgType
	}
	return Message_Zero
}

func (x *Message) GetTick() int32 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *Message) GetTeamUpdate() *TeamUpdate {
	if x != nil {
		return x.TeamUpdate
	}
	return nil
}

func (x *Message) GetTickState() *TickState {
	if x != nil {
		return x.TickState
	}
	return nil
}

func (x *Message) GetInit() *Init {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *Message) GetRound() *Round {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *Message) GetProgress() *Progress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *Message) GetRoundTime() *RoundTime {
	if x != nil {
		return x.RoundTime
	}
	return nil
}

func (x *Message) GetShot() *Shot {
	if x != nil {
		return x.Shot
	}
	return nil
}

func (x *Message) GetFrag() *Frag {
	if x != nil {
		return x.Frag
	}
	return nil
}

func (x *Message) GetDemo() *Demo {
	if x != nil {
		return x.Demo
	}
	return nil
}

func (x *Message) GetGrenadeEvent() *Grenade {
	if x != nil {
		return x.GrenadeEvent
	}
	return nil
}

func (x *Message) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type Player struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	PlayerId              int32                  `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Name                  string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Team                  string                 `protobuf:"bytes,3,opt,name=Team,proto3" json:"Team,omitempty"`
	X                     float64                `protobuf:"fixed64,4,opt,name=X,proto3" json:"X,omitempty"`
	Y                     float64                `protobuf:"fixed64,5,opt,name=Y,proto3" json:"Y,omitempty"`
	Z                     float64                `protobuf:"fixed64,6,opt,name=Z,proto3" json:"Z,omitempty"`
	Rotation              float32                `protobuf:"fixed32,7,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	Alive                 bool                   `protobuf:"varint,8,opt,name=Alive,proto3" json:"Alive,omitempty"`
	Weapon                string                 `protobuf:"bytes,9,opt,name=Weapon,proto3" json:"Weapon,omitempty"`
	Flashed               bool                   `protobuf:"varint,10,opt,name=Flashed,proto3" json:"Flashed,omitempty"`
	Hp                    int32                  `protobuf:"varint,11,opt,name=Hp,proto3" json:"Hp,omitempty"`
	Armor                 int32                  `protobuf:"varint,12,opt,name=Armor,proto3" json:"Armor,omitempty"`
	Helmet                bool                   `protobuf:"varint,13,opt,name=Helmet,proto3" json:"Helmet,omitempty"`
	Defuse                bool                   `protobuf:"varint,14,opt,name=Defuse,proto3" json:"Defuse,omitempty"`
	Bomb                  bool                   `protobuf:"varint,15,opt,name=Bomb,proto3" json:"Bomb,omitempty"`
	Money                 int32                  `protobuf:"varint,16,opt,name=Money,proto3" json:"Money,omitempty"`
	Primary               string                 `protobuf:"bytes,17,opt,name=Primary,proto3" json:"Primary,omitempty"`
	PrimaryAmmoMagazine   int32                  `protobuf:"varint,18,opt,name=PrimaryAmmoMagazine,proto3" json:"PrimaryAmmoMagazine,omitempty"`
	PrimaryAmmoReserve    int32                  `protobuf:"varint,19,opt,name=PrimaryAmmoReserve,proto3" json:"PrimaryAmmoReserve,omitempty"`
	Secondary             string                 `protobuf:"bytes,20,opt,name=Secondary,proto3" json:"Secondary,omitempty"`
	SecondaryAmmoMagazine int32                  `protobuf:"varint,21,opt,name=SecondaryAmmoMagazine,proto3" json:"SecondaryAmmoMagazine,omitempty"`
	SecondaryAmmoReserve  int32                  `protobuf:"varint,22,opt,name=SecondaryAmmoReserve,proto3" json:"SecondaryAmmoReserve,omitempty"`
	Grenades              []string               `protobuf:"bytes,23,rep,name=Grenades,proto3" json:"Grenades,omitempty"`
	Kills                 int32                  `protobuf:"varint,24,opt,name=Kills,proto3" json:"Kills,omitempty"`
	Assists               int32                  `protobuf:"varint,25,opt,name=Assists,proto3" json:"Assists,omitempty"`
	Deaths                int32                  `protobuf:"varint,26,opt,name=Deaths,proto3" json:"Deaths,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_Message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{1}
}

func (x *Player) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *Player) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Player) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Player) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Player) GetRotation() float32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *Player) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *Player) GetWeapon() string {
	if x != nil {
		return x.Weapon
	}
	return ""
}

func (x *Player) GetFlashed() bool {
	if x != nil {
		return x.Flashed
	}
	return false
}

func (x *Player) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *Player) GetArmor() int32 {
	if x != nil {
		return x.Armor
	}
	return 0
}

func (x *Player) GetHelmet() bool {
	if x != nil {
		return x.Helmet
	}
	return false
}

func (x *Player) GetDefuse() bool {
	if x != nil {
		return x.Defuse
	}
	return false
}

func (x *Player) GetBomb() bool {
	if x != nil {
		return x.Bomb
	}
	return false
}

func (x *Player) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *Player) GetPrimary() string {
	if x != nil {
		return x.Primary
	}
	return ""
}

func (x *Player) GetPrimaryAmmoMagazine() int32 {
	if x != nil {
		return x.PrimaryAmmoMagazine
	}
	return 0
}

func (x *Player) GetPrimaryAmmoReserve() int32 {
	if x != nil {
		return x.PrimaryAmmoReserve
	}
	return 0
}

func (x *Player) GetSecondary() string {
	if x != nil {
		return x.Secondary
	}
	return ""
}

func (x *Player) GetSecondaryAmmoMagazine() int32 {
	if x != nil {
		return x.SecondaryAmmoMagazine
	}
	return 0
}

func (x *Player) GetSecondaryAmmoReserve() int32 {
	if x != nil {
		return x.SecondaryAmmoReserve
	}
	return 0
}

func (x *Player) GetGrenades() []string {
	if x != nil {
		return x.Grenades
	}
	return nil
}

func (x *Player) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *Player) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *Player) GetDeaths() int32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

type TeamUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TName         string                 `protobuf:"bytes,1,opt,name=TName,proto3" json:"TName,omitempty"`
	TScore        int32                  `protobuf:"varint,2,opt,name=TScore,proto3" json:"TScore,omitempty"`
	CTName        string                 `protobuf:"bytes,3,opt,name=CTName,proto3" json:"CTName,omitempty"`
	CTScore       int32                  `protobuf:"varint,4,opt,name=CTScore,proto3" json:"CTScore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamUpdate) Reset() {
	*x = TeamUpdate{}
	mi := &file_Message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamUpdate) ProtoMessage() {}

func (x *TeamUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamUpdate.ProtoReflect.Descriptor instead.
func (*TeamUpdate) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{2}
}

func (x *TeamUpdate) GetTName() string {
	if x != nil {
		return x.TName
	}
	return ""
}

func (x *TeamUpdate) GetTScore() int32 {
	if x != nil {
		return x.TScore
	}
	return 0
}

func (x *TeamUpdate) GetCTName() string {
	if x != nil {
		return x.CTName
	}
	return ""
}

func (x *TeamUpdate) GetCTScore() int32 {
	if x != nil {
		return x.CTScore
	}
	return 0
}

type TickState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       []*Player              `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"`
	Nades         []*Grenade             `protobuf:"bytes,2,rep,name=Nades,proto3" json:"Nades,omitempty"`
	Bomb          *Bomb                  `protobuf:"bytes,3,opt,name=Bomb,proto3" json:"Bomb,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TickState) Reset() {
	*x = TickState{}
	mi := &file_Message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TickState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickState) ProtoMessage() {}

func (x *TickState) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickState.ProtoReflect.Descriptor instead.
func (*TickState) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{3}
}

func (x *TickState) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TickState) GetNades() []*Grenade {
	if x != nil {
		return x.Nades
	}
	return nil
}

func (x *TickState) GetBomb() *Bomb {
	if x != nil {
		return x.Bomb
	}
	return nil
}

type Init struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MapName       string                 `protobuf:"bytes,1,opt,name=mapName,proto3" json:"mapName,omitempty"`
	TName         string                 `protobuf:"bytes,2,opt,name=TName,proto3" json:"TName,omitempty"`
	CTName        string                 `protobuf:"bytes,3,opt,name=CTName,proto3" json:"CTName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Init) Reset() {
	*x = Init{}
	mi := &file_Message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Init) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Init) ProtoMessage() {}

func (x *Init) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Init.ProtoReflect.Descriptor instead.
func (*Init) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{4}
}

func (x *Init) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

func (x *Init) GetTName() string {
	if x != nil {
		return x.TName
	}
	return ""
}

func (x *Init) GetCTName() string {
	if x != nil {
		return x.CTName
	}
	return ""
}

type Frag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VictimName    string                 `protobuf:"bytes,1,opt,name=VictimName,proto3" json:"VictimName,omitempty"`
	VictimTeam    string                 `protobuf:"bytes,2,opt,name=VictimTeam,proto3" json:"VictimTeam,omitempty"`
	KillerName    string                 `protobuf:"bytes,3,opt,name=KillerName,proto3" json:"KillerName,omitempty"`
	KillerTeam    string                 `protobuf:"bytes,4,opt,name=KillerTeam,proto3" json:"KillerTeam,omitempty"`
	Weapon        string                 `protobuf:"bytes,5,opt,name=Weapon,proto3" json:"Weapon,omitempty"`
	IsHeadshot    bool                   `protobuf:"varint,6,opt,name=IsHeadshot,proto3" json:"IsHeadshot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Frag) Reset() {
	*x = Frag{}
	mi := &file_Message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frag) ProtoMessage() {}

func (x *Frag) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frag.ProtoReflect.Descriptor instead.
func (*Frag) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{5}
}

func (x *Frag) GetVictimName() string {
	if x != nil {
		return x.VictimName
	}
	return ""
}

func (x *Frag) GetVictimTeam() string {
	if x != nil {
		return x.VictimTeam
	}
	return ""
}

func (x *Frag) GetKillerName() string {
	if x != nil {
		return x.KillerName
	}
	return ""
}

func (x *Frag) GetKillerTeam() string {
	if x != nil {
		return x.KillerTeam
	}
	return ""
}

func (x *Frag) GetWeapon() string {
	if x != nil {
		return x.Weapon
	}
	return ""
}

func (x *Frag) GetIsHeadshot() bool {
	if x != nil {
		return x.IsHeadshot
	}
	return false
}

type Shot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      int32                  `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	X             float64                `protobuf:"fixed64,2,opt,name=X,proto3" json:"X,omitempty"`
	Y             float64                `protobuf:"fixed64,3,opt,name=Y,proto3" json:"Y,omitempty"`
	Rotation      float32                `protobuf:"fixed32,4,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Shot) Reset() {
	*x = Shot{}
	mi := &file_Message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shot) ProtoMessage() {}

func (x *Shot) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shot.ProtoReflect.Descriptor instead.
func (*Shot) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{6}
}

func (x *Shot) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *Shot) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Shot) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Shot) GetRotation() float32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

type Grenade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind          string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	X             float64                `protobuf:"fixed64,3,opt,name=x,proto3" json:"x,omitempty"`
	Y             float64                `protobuf:"fixed64,4,opt,name=y,proto3" json:"y,omitempty"`
	Z             float64                `protobuf:"fixed64,5,opt,name=z,proto3" json:"z,omitempty"`
	Action        string                 `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Grenade) Reset() {
	*x = Grenade{}
	mi := &file_Message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Grenade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grenade) ProtoMessage() {}

func (x *Grenade) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grenade.ProtoReflect.Descriptor instead.
func (*Grenade) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{7}
}

func (x *Grenade) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Grenade) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Grenade) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Grenade) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Grenade) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Grenade) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type Bomb struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float64                `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	State         Bomb_BombState         `protobuf:"varint,4,opt,name=state,proto3,enum=csgo.Bomb_BombState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bomb) Reset() {
	*x = Bomb{}
	mi := &file_Message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bomb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bomb) ProtoMessage() {}

func (x *Bomb) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bomb.ProtoReflect.Descriptor instead.
func (*Bomb) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{8}
}

func (x *Bomb) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Bomb) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Bomb) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Bomb) GetState() Bomb_BombState {
	if x != nil {
		return x.State
	}
	return Bomb_Zero
}

type Round struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RoundNo           int32                  `protobuf:"varint,1,opt,name=RoundNo,proto3" json:"RoundNo,omitempty"`
	RoundTookSeconds  int32                  `protobuf:"varint,2,opt,name=RoundTookSeconds,proto3" json:"RoundTookSeconds,omitempty"`
	StartTick         int32                  `protobuf:"varint,3,opt,name=StartTick,proto3" json:"StartTick,omitempty"`
	FreezetimeEndTick int32                  `protobuf:"varint,4,opt,name=FreezetimeEndTick,proto3" json:"FreezetimeEndTick,omitempty"`
	EndTick           int32                  `protobuf:"varint,5,opt,name=EndTick,proto3" json:"EndTick,omitempty"`
	Ticks             []*Message             `protobuf:"bytes,6,rep,name=Ticks,proto3" json:"Ticks,omitempty"`
	TeamState         *TeamUpdate            `protobuf:"bytes,7,opt,name=TeamState,proto3" json:"TeamState,omitempty"`
	Winner            string                 `protobuf:"bytes,8,opt,name=Winner,proto3" json:"Winner,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Round) Reset() {
	*x = Round{}
	mi := &file_Message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Round) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round) ProtoMessage() {}

func (x *Round) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round.ProtoReflect.Descriptor instead.
func (*Round) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{9}
}

func (x *Round) GetRoundNo() int32 {
	if x != nil {
		return x.RoundNo
	}
	return 0
}

func (x *Round) GetRoundTookSeconds() int32 {
	if x != nil {
		return x.RoundTookSeconds
	}
	return 0
}

func (x *Round) GetStartTick() int32 {
	if x != nil {
		return x.StartTick
	}
	return 0
}

func (x *Round) GetFreezetimeEndTick() int32 {
	if x != nil {
		return x.FreezetimeEndTick
	}
	return 0
}

func (x *Round) GetEndTick() int32 {
	if x != nil {
		return x.EndTick
	}
	return 0
}

func (x *Round) GetTicks() []*Message {
	if x != nil {
		return x.Ticks
	}
	return nil
}

func (x *Round) GetTeamState() *TeamUpdate {
	if x != nil {
		return x.TeamState
	}
	return nil
}

func (x *Round) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

type Progress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      int32                  `protobuf:"varint,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Progress) Reset() {
	*x = Progress{}
	mi := &file_Message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Progress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Progress) ProtoMessage() {}

func (x *Progress) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Progress.ProtoReflect.Descriptor instead.
func (*Progress) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{10}
}

func (x *Progress) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *Progress) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RoundTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoundTime     string                 `protobuf:"bytes,1,opt,name=RoundTime,proto3" json:"RoundTime,omitempty"`
	FreezeTime    int32                  `protobuf:"varint,2,opt,name=FreezeTime,proto3" json:"FreezeTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoundTime) Reset() {
	*x = RoundTime{}
	mi := &file_Message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundTime) ProtoMessage() {}

func (x *RoundTime) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundTime.ProtoReflect.Descriptor instead.
func (*RoundTime) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{11}
}

func (x *RoundTime) GetRoundTime() string {
	if x != nil {
		return x.RoundTime
	}
	return ""
}

func (x *RoundTime) GetFreezeTime() int32 {
	if x != nil {
		return x.FreezeTime
	}
	return 0
}

type Demo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       string                 `protobuf:"bytes,1,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
	Platform      Demo_DemoPlatformType  `protobuf:"varint,2,opt,name=Platform,proto3,enum=csgo.Demo_DemoPlatformType" json:"Platform,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Demo) Reset() {
	*x = Demo{}
	mi := &file_Message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Demo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Demo) ProtoMessage() {}

func (x *Demo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Demo.ProtoReflect.Descriptor instead.
func (*Demo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{12}
}

func (x *Demo) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Demo) GetPlatform() Demo_DemoPlatformType {
	if x != nil {
		return x.Platform
	}
	return Demo_Upload
}

var File_Message_proto protoreflect.FileDescriptor

const file_Message_proto_rawDesc = "" +
	"\n" +
	"\rMessage.proto\x12\x04csgo\"\xb3\a\n" +
	"\aMessage\x123\n" +
	"\amsgType\x18\x01 \x01(\x0e2\x19.csgo.Message.MessageTypeR\amsgType\x12\x12\n" +
	"\x04tick\x18\x02 \x01(\x05R\x04tick\x125\n" +
	"\n" +
	"teamUpdate\x18\x03 \x01(\v2\x10.csgo.TeamUpdateH\x00R\n" +
	"teamUpdate\x88\x01\x01\x122\n" +
	"\ttickState\x18\x04 \x01(\v2\x0f.csgo.TickStateH\x01R\ttickState\x88\x01\x01\x12#\n" +
	"\x04init\x18\x05 \x01(\v2\n" +
	".csgo.InitH\x02R\x04init\x88\x01\x01\x12&\n" +
	"\x05round\x18\x06 \x01(\v2\v.csgo.RoundH\x03R\x05round\x88\x01\x01\x12/\n" +
	"\bprogress\x18\a \x01(\v2\x0e.csgo.ProgressH\x04R\bprogress\x88\x01\x01\x122\n" +
	"\troundTime\x18\b \x01(\v2\x0f.csgo.RoundTimeH\x05R\troundTime\x88\x01\x01\x12#\n" +
	"\x04shot\x18\t \x01(\v2\n" +
	".csgo.ShotH\x06R\x04shot\x88\x01\x01\x12#\n" +
	"\x04frag\x18\n" +
	" \x01(\v2\n" +
	".csgo.FragH\aR\x04frag\x88\x01\x01\x12#\n" +
	"\x04demo\x18\v \x01(\v2\n" +
	".csgo.DemoH\bR\x04demo\x88\x01\x01\x126\n" +
	"\fgrenadeEvent\x18\f \x01(\v2\r.csgo.GrenadeH\tR\fgrenadeEvent\x88\x01\x01\x12\x1d\n" +
	"\amessage\x18\r \x01(\tH\n" +
	"R\amessage\x88\x01\x01\"\xf8\x01\n" +
	"\vMessageType\x12\b\n" +
	"\x04Zero\x10\x00\x12\x13\n" +
	"\x0fTickStateUpdate\x10\x01\x12\x11\n" +
	"\rAddPlayerType\x10\x02\x12\f\n" +
	"\bInitType\x10\x04\x12\x0f\n" +
	"\vDemoEndType\x10\x05\x12\r\n" +
	"\tRoundType\x10\x06\x12\x10\n" +
	"\fProgressType\x10\a\x12\x12\n" +
	"\x0eTimeUpdateType\x10\b\x12\f\n" +
	"\bShotType\x10\t\x12\r\n" +
	"\tEmptyType\x10\n" +
	"\x12\f\n" +
	"\bFragType\x10\v\x12\x13\n" +
	"\x0fPlayRequestType\x10\f\x12\r\n" +
	"\tErrorType\x10\r\x12\x14\n" +
	"\x10GrenadeEventType\x10\x0eB\r\n" +
	"\v_teamUpdateB\f\n" +
	"\n" +
	"_tickStateB\a\n" +
	"\x05_initB\b\n" +
	"\x06_roundB\v\n" +
	"\t_progressB\f\n" +
	"\n" +
	"_roundTimeB\a\n" +
	"\x05_shotB\a\n" +
	"\x05_fragB\a\n" +
	"\x05_demoB\x0f\n" +
	"\r_grenadeEventB\n" +
	"\n" +
	"\b_message\"\xc2\x05\n" +
	"\x06Player\x12\x1a\n" +
	"\bPlayerId\x18\x01 \x01(\x05R\bPlayerId\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12\x12\n" +
	"\x04Team\x18\x03 \x01(\tR\x04Team\x12\f\n" +
	"\x01X\x18\x04 \x01(\x01R\x01X\x12\f\n" +
	"\x01Y\x18\x05 \x01(\x01R\x01Y\x12\f\n" +
	"\x01Z\x18\x06 \x01(\x01R\x01Z\x12\x1a\n" +
	"\bRotation\x18\a \x01(\x02R\bRotation\x12\x14\n" +
	"\x05Alive\x18\b \x01(\bR\x05Alive\x12\x16\n" +
	"\x06Weapon\x18\t \x01(\tR\x06Weapon\x12\x18\n" +
	"\aFlashed\x18\n" +
	" \x01(\bR\aFlashed\x12\x0e\n" +
	"\x02Hp\x18\v \x01(\x05R\x02Hp\x12\x14\n" +
	"\x05Armor\x18\f \x01(\x05R\x05Armor\x12\x16\n" +
	"\x06Helmet\x18\r \x01(\bR\x06Helmet\x12\x16\n" +
	"\x06Defuse\x18\x0e \x01(\bR\x06Defuse\x12\x12\n" +
	"\x04Bomb\x18\x0f \x01(\bR\x04Bomb\x12\x14\n" +
	"\x05Money\x18\x10 \x01(\x05R\x05Money\x12\x18\n" +
	"\aPrimary\x18\x11 \x01(\tR\aPrimary\x120\n" +
	"\x13PrimaryAmmoMagazine\x18\x12 \x01(\x05R\x13PrimaryAmmoMagazine\x12.\n" +
	"\x12PrimaryAmmoReserve\x18\x13 \x01(\x05R\x12PrimaryAmmoReserve\x12\x1c\n" +
	"\tSecondary\x18\x14 \x01(\tR\tSecondary\x124\n" +
	"\x15SecondaryAmmoMagazine\x18\x15 \x01(\x05R\x15SecondaryAmmoMagazine\x122\n" +
	"\x14SecondaryAmmoReserve\x18\x16 \x01(\x05R\x14SecondaryAmmoReserve\x12\x1a\n" +
	"\bGrenades\x18\x17 \x03(\tR\bGrenades\x12\x14\n" +
	"\x05Kills\x18\x18 \x01(\x05R\x05Kills\x12\x18\n" +
	"\aAssists\x18\x19 \x01(\x05R\aAssists\x12\x16\n" +
	"\x06Deaths\x18\x1a \x01(\x05R\x06Deaths\"l\n" +
	"\n" +
	"TeamUpdate\x12\x14\n" +
	"\x05TName\x18\x01 \x01(\tR\x05TName\x12\x16\n" +
	"\x06TScore\x18\x02 \x01(\x05R\x06TScore\x12\x16\n" +
	"\x06CTName\x18\x03 \x01(\tR\x06CTName\x12\x18\n" +
	"\aCTScore\x18\x04 \x01(\x05R\aCTScore\"x\n" +
	"\tTickState\x12&\n" +
	"\aPlayers\x18\x01 \x03(\v2\f.csgo.PlayerR\aPlayers\x12#\n" +
	"\x05Nades\x18\x02 \x03(\v2\r.csgo.GrenadeR\x05Nades\x12\x1e\n" +
	"\x04Bomb\x18\x03 \x01(\v2\n" +
	".csgo.BombR\x04Bomb\"N\n" +
	"\x04Init\x12\x18\n" +
	"\amapName\x18\x01 \x01(\tR\amapName\x12\x14\n" +
	"\x05TName\x18\x02 \x01(\tR\x05TName\x12\x16\n" +
	"\x06CTName\x18\x03 \x01(\tR\x06CTName\"\xbe\x01\n" +
	"\x04Frag\x12\x1e\n" +
	"\n" +
	"VictimName\x18\x01 \x01(\tR\n" +
	"VictimName\x12\x1e\n" +
	"\n" +
	"VictimTeam\x18\x02 \x01(\tR\n" +
	"VictimTeam\x12\x1e\n" +
	"\n" +
	"KillerName\x18\x03 \x01(\tR\n" +
	"KillerName\x12\x1e\n" +
	"\n" +
	"KillerTeam\x18\x04 \x01(\tR\n" +
	"KillerTeam\x12\x16\n" +
	"\x06Weapon\x18\x05 \x01(\tR\x06Weapon\x12\x1e\n" +
	"\n" +
	"IsHeadshot\x18\x06 \x01(\bR\n" +
	"IsHeadshot\"Z\n" +
	"\x04Shot\x12\x1a\n" +
	"\bPlayerId\x18\x01 \x01(\x05R\bPlayerId\x12\f\n" +
	"\x01X\x18\x02 \x01(\x01R\x01X\x12\f\n" +
	"\x01Y\x18\x03 \x01(\x01R\x01Y\x12\x1a\n" +
	"\bRotation\x18\x04 \x01(\x02R\bRotation\"o\n" +
	"\aGrenade\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04kind\x18\x02 \x01(\tR\x04kind\x12\f\n" +
	"\x01x\x18\x03 \x01(\x01R\x01x\x12\f\n" +
	"\x01y\x18\x04 \x01(\x01R\x01y\x12\f\n" +
	"\x01z\x18\x05 \x01(\x01R\x01z\x12\x16\n" +
	"\x06action\x18\x06 \x01(\tR\x06action\"\xb6\x01\n" +
	"\x04Bomb\x12\f\n" +
	"\x01x\x18\x01 \x01(\x01R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x01R\x01y\x12\f\n" +
	"\x01z\x18\x03 \x01(\x01R\x01z\x12*\n" +
	"\x05state\x18\x04 \x01(\x0e2\x14.csgo.Bomb.BombStateR\x05state\"X\n" +
	"\tBombState\x12\b\n" +
	"\x04Zero\x10\x00\x12\f\n" +
	"\bDefusing\x10\x01\x12\v\n" +
	"\aDefused\x10\x02\x12\v\n" +
	"\aExplode\x10\x03\x12\f\n" +
	"\bPlanting\x10\x04\x12\v\n" +
	"\aPlanted\x10\x05\"\xa0\x02\n" +
	"\x05Round\x12\x18\n" +
	"\aRoundNo\x18\x01 \x01(\x05R\aRoundNo\x12*\n" +
	"\x10RoundTookSeconds\x18\x02 \x01(\x05R\x10RoundTookSeconds\x12\x1c\n" +
	"\tStartTick\x18\x03 \x01(\x05R\tStartTick\x12,\n" +
	"\x11FreezetimeEndTick\x18\x04 \x01(\x05R\x11FreezetimeEndTick\x12\x18\n" +
	"\aEndTick\x18\x05 \x01(\x05R\aEndTick\x12#\n" +
	"\x05Ticks\x18\x06 \x03(\v2\r.csgo.MessageR\x05Ticks\x12.\n" +
	"\tTeamState\x18\a \x01(\v2\x10.csgo.TeamUpdateR\tTeamState\x12\x16\n" +
	"\x06Winner\x18\b \x01(\tR\x06Winner\"@\n" +
	"\bProgress\x12\x1a\n" +
	"\bProgress\x18\x01 \x01(\x05R\bProgress\x12\x18\n" +
	"\aMessage\x18\x02 \x01(\tR\aMessage\"I\n" +
	"\tRoundTime\x12\x1c\n" +
	"\tRoundTime\x18\x01 \x01(\tR\tRoundTime\x12\x1e\n" +
	"\n" +
	"FreezeTime\x18\x02 \x01(\x05R\n" +
	"FreezeTime\"\x90\x01\n" +
	"\x04Demo\x12\x18\n" +
	"\aMatchId\x18\x01 \x01(\tR\aMatchId\x127\n" +
	"\bPlatform\x18\x02 \x01(\x0e2\x1b.csgo.Demo.DemoPlatformTypeR\bPlatform\"5\n" +
	"\x10DemoPlatformType\x12\n" +
	"\n" +
	"\x06Upload\x10\x00\x12\n" +
	"\n" +
	"\x06Faceit\x10\x01\x12\t\n" +
	"\x05Steam\x10\x02B\n" +
	"Z\b/messageb\x06proto3"

var (
	file_Message_proto_rawDescOnce sync.Once
	file_Message_proto_rawDescData []byte
)

func file_Message_proto_rawDescGZIP() []byte {
	file_Message_proto_rawDescOnce.Do(func() {
		file_Message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Message_proto_rawDesc), len(file_Message_proto_rawDesc)))
	})
	return file_Message_proto_rawDescData
}

var file_Message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_Message_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_Message_proto_goTypes = []any{
	(Message_MessageType)(0),   // 0: csgo.Message.MessageType
	(Bomb_BombState)(0),        // 1: csgo.Bomb.BombState
	(Demo_DemoPlatformType)(0), // 2: csgo.Demo.DemoPlatformType
	(*Message)(nil),            // 3: csgo.Message
	(*Player)(nil),             // 4: csgo.Player
	(*TeamUpdate)(nil),         // 5: csgo.TeamUpdate
	(*TickState)(nil),          // 6: csgo.TickState
	(*Init)(nil),               // 7: csgo.Init
	(*Frag)(nil),               // 8: csgo.Frag
	(*Shot)(nil),               // 9: csgo.Shot
	(*Grenade)(nil),            // 10: csgo.Grenade
	(*Bomb)(nil),               // 11: csgo.Bomb
	(*Round)(nil),              // 12: csgo.Round
	(*Progress)(nil),           // 13: csgo.Progress
	(*RoundTime)(nil),          // 14: csgo.RoundTime
	(*Demo)(nil),               // 15: csgo.Demo
}
var file_Message_proto_depIdxs = []int32{
	0,  // 0: csgo.Message.msgType:type_name -> csgo.Message.MessageType
	5,  // 1: csgo.Message.teamUpdate:type_name -> csgo.TeamUpdate
	6,  // 2: csgo.Message.tickState:type_name -> csgo.TickState
	7,  // 3: csgo.Message.init:type_name -> csgo.Init
	12, // 4: csgo.Message.round:type_name -> csgo.Round
	13, // 5: csgo.Message.progress:type_name -> csgo.Progress
	14, // 6: csgo.Message.roundTime:type_name -> csgo.RoundTime
	9,  // 7: csgo.Message.shot:type_name -> csgo.Shot
	8,  // 8: csgo.Message.frag:type_name -> csgo.Frag
	15, // 9: csgo.Message.demo:type_name -> csgo.Demo
	10, // 10: csgo.Message.grenadeEvent:type_name -> csgo.Grenade
	4,  // 11: csgo.TickState.Players:type_name -> csgo.Player
	10, // 12: csgo.TickState.Nades:type_name -> csgo.Grenade
	11, // 13: csgo.TickState.Bomb:type_name -> csgo.Bomb
	1,  // 14: csgo.Bomb.state:type_name -> csgo.Bomb.BombState
	3,  // 15: csgo.Round.Ticks:type_name -> csgo.Message
	5,  // 16: csgo.Round.TeamState:type_name -> csgo.TeamUpdate
	2,  // 17: csgo.Demo.Platform:type_name -> csgo.Demo.DemoPlatformType
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_Message_proto_init() }
func file_Message_proto_init() {
	if File_Message_proto != nil {
		return
	}
	file_Message_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Message_proto_rawDesc), len(file_Message_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Message_proto_goTypes,
		DependencyIndexes: file_Message_proto_depIdxs,
		EnumInfos:         file_Message_proto_enumTypes,
		MessageInfos:      file_Message_proto_msgTypes,
	}.Build()
	File_Message_proto = out.File
	file_Message_proto_goTypes = nil
	file_Message_proto_depIdxs = nil
}
